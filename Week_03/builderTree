class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLength = preorder.length;
        int inLength = inorder.length;
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < inLength; i++) {
            map.put(inorder[i],i);
        }
        return buildTree(preorder,0,preLength - 1,map,0,inLength - 1);
    }
    private TreeNode buildTree(int[] preorder,int preStart,int preEnd, Map<Integer,Integer> inMap,int inStart,           int inEnd) {
         if (preStart > preEnd || inStart > inEnd) {
            return null;
        }
        int rootVal = preorder[preStart];
        TreeNode root = new TreeNode(rootVal);
        int pIndex = inMap.get(rootVal);
        root.left = buildTree(preorder,preStart + 1,pIndex - inStart + preStart,inMap,inStart,pIndex - 1);
        root.right = buildTree(preorder,pIndex - inStart + preStart + 1,preEnd,inMap,pIndex + 1, inEnd);
        return root;
    }
}
